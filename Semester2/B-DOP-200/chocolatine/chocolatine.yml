name: chocolatine

on:
  push:
    branches-ignore:
    - "ga-ignore-*"
  pull_request:
    branches-ignore:
    - "ga-ignore-*"

env:
  MIRROR_URL: "git@github.com:EpitechPromo2026/B-DOP-200-BAR-2-1-chocolatine-marc.catalan-sanchez.git"
  EXECUTABLES: "chocolatine"
jobs:

  check_repository_cleanliness:
    name: "check_repository_cleanliness"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: clean
        run: |
          UNWANTED_FILES=$(find . -type f -not -path "./git/*" -wholename "*/tmp*" -or -name "*.o" -or -name "*.a" -or -name "*.gcno" -or -name "*.gcda" -or -name "*gcov" -or -name "*pain_au_chocolat*")
          for FILE
           in $UNWANTED_FILES; do
            echo "::error file=${FILE#./}, title=Unwanted file detected::${FILE#./}"
          done
          if [[ -z "$UNWATED_FILES" ]]
          then
            echo empty list
          else
            exit 1
          fi
  check_program_compilation:
    needs: [ check_repository_cleanliness ]
    name: "check_program_compilation"
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker:latest

    steps:
      - uses: actions/checkout@v3
      - id: check_if_compil
        run: make
        timeout-minutes: 2
      - run: |
              make clean
      - run: |
            if [ -f $EXECUTABLES ]
            then
                do
            else
                done
            fi
  run_tests:
    needs: [ check_program_compilation ]
    name: "run_tests"
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker:latest

    steps:
      - uses: actions/checkout@v3
      - id: tests_run
        run: make tests_run
        timeout-minutes: 2

  push_to_mirror:
    needs: [ check_program_compilation ]
    name: "Push to mirror"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ env.MIRROR_URL }}
          ssh_private_key:
            ${{ secrets.GIT_SSH_PRIVATE_KEY }}
