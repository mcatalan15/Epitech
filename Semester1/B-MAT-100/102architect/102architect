#!/usr/bin/pyrhon3

import sys
from translation import translation, translation_mat
from scaling import scaling, scaling_mat
from rotation import rotation, rotation_mat
from reflection import reflection, reflection_mat

len = len(sys.argv)
i = 0
result = (int(sys.argv[1]), int(sys.argv[2]))
result_mat =[[0,0,0],
            [0,0,0],
            [0,0,0]]

while (i < len):
    if (sys.argv[i] == "-t"):
        result = translation(result, int(sys.argv[i+1]), int(sys.argv[i+2]))
        result_mat = translation_mat(result_mat, int(sys.argv[i+1]), int(sys.argv[i+2]))

    elif (sys.argv[i] == "-z"):
        result = scaling(result, int(sys.argv[i+1]), int(sys.argv[i+2]))
        result_mat = scaling_mat(result_mat, int(sys.argv[i+1]), int(sys.argv[i+2]))

    elif (sys.argv[i] == "-r"):
        result = rotation(result, int(sys.argv[i+1]))
        result_mat = rotation_mat(result_mat, int(sys.argv[i+1]))
    elif (sys.argv[i] == "-s"):
        result = reflection(result, int(sys.argv[i+1]))
        result_mat = reflection_mat(result_mat, int(sys.argv[i+1]))
        
    # else:
    
    i += 1

def print_matrix(result_mat):
    print ("%.2f "%result_mat[0][0],"%.2f "%result_mat[0][1],"%.2f "%result_mat[0][2])
    print ("%.2f "%result_mat[1][0],"%.2f "%result_mat[1][1],"%.2f "%result_mat[1][2])
    print ("%.2f "%result_mat[2][0],"%.2f "%result_mat[2][1],"%.2f "%result_mat[2][2])

print_matrix(result_mat)
print("({:.2f},".format(int(sys.argv[1])), "{:.2f})".format(int(sys.argv[2]))," => ","({:.2f},".format(result[0]), "{:.2f})".format(result[1]))

